int     iNrCust, iCounter, iSetItems;
double  dActSPowCust, dActPowCust, dPfCust, dUtilFactor;
double  dTypLodSmax, dTypLodPmax, dTypPf;
double  dRefOrder;
string  strLodLvp, strOutput, strLodName, strLodTyp;
string  strLine1, strLine2;
object  oLodLv, oMyObj, oMyRefObj;
set     sLodLvs, sMySet;


!******** EINFÜGEN IN DIE ERGEBNISBOX ********

! $LOOP,_STR(DPL:e:ResultStr)
! # $N,@:_STRING(-1)
! $END

!*********************************************

strOutput = '';
!Alle referenzierten (verknüpften) Objekte innerhalb dieses Skriptes
!in ein Set laden
sMySet = this.GetContents('*.IntRef', 1);
! Alphanumerisch aufsteigend nach Namen sortieren
sMySet.SortToName(0);
! Überprüfen ob mindestens bzw. nur ein einziges
! referenziertes/verknüpftes Element geladen ist
iSetItems = sMySet.Count();
if (iSetItems <> 1){

  strOutput = sprintf('Keine oder zu viele verknüpfte \nElemente im Skript vorhanden!');
  !Rückgabe des Strings
  this.SetResultString(strOutput);
  ! Programmcode verlassen
  exit();
}


!Erstes Objekt mit der Reihenfolge Nr.0 ermitteln aus dem Sets ermitteln
oMyRefObj = sMySet.First();
!Referenziertes Objekt aus der Verknüpfung ermitteln
oMyObj = oMyRefObj:obj_id;

if(oMyObj:cHasPartLod = 1){
  iCounter = 0;
  
  sLodLvs = oMyObj.GetChildren(0,'*.ElmLodLvp');

  for(oLodLv = sLodLvs.First();oLodLv;oLodLv = sLodLvs.Next()){
    
    strLodName = oLodLv:e:loc_name; !Elementname
    strLodTyp= oLodLv:r:typ_id:e:loc_name; !Elementtyp
    iNrCust = oLodLv:e:NrCust; !Anzahl Verbraucher
    dActPowCust = oLodLv:e:cPrCust; !Last pro Verbraucher
    dPfCust = oLodLv:e:ccosphi; !Leistungsfaktor
    dUtilFactor = oLodLv:e:UtilFactor; !Gleichzeitigkeitsfaktor
    dTypLodSmax = oLodLv:r:typ_id:e:Smax; !max. Scheinleistung des Lasttyps
    dTypPf = oLodLv:r:typ_id:e:cosphi; !Leistungsfaktor des Lasttyps
    
    !max. Wirkleistung des Lasttyps errechnen
    dTypLodPmax = dTypLodSmax / dTypPf;
    
    !strLodLvp = sprintf('%i x %s (%s)',iNrCust,strLodTyp,strLodName);
	  !Umrechnen von kW in W
	  dActPowCust = dActPowCust * 1000;
	  dActSPowCust = dActPowCust / dPfCust;
	  if (iNrCust > 1) {
      strLodLvp = sprintf('%i x %s (a´ S=%.2f VA, cos phi=%.2f)',iNrCust,strLodTyp,dActSPowCust,dPfCust);
	  }
	  else {
        strLodLvp = sprintf('%i x %s (S=%.2f VA, cos phi=%.2f)',iNrCust,strLodTyp,dActSPowCust,dPfCust);
	  }
    
    ! Wenn Zähler größer 1 -> Zeilenumbruch zu Beginn hinzu fügen
    if(iCounter > 0){
      strLodLvp = sprintf('\n%s',strLodLvp);
    }
    
    !Strings zusammenfassen
    strOutput =  sprintf('%s%s',strOutput,strLodLvp);
    iCounter = iCounter + 1;
  }
  !Rückgabe des Strings
  this.SetResultString(strOutput);
}